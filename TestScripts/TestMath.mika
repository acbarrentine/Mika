fun TestEntry() : void
{
	TestIntMath()
	TestFloatMath()
	TestLogicalOperators()
	TestVectors()
}

fun TestIntMath() : void
{
	AssertEqualsInt(4, 4)
	AssertEqualsInt(9 + 13, 22)
	AssertEqualsInt(9 + -4, 5)

	AssertEqualsInt(SquareInt(5), 25)
	three : int <- 3
	AssertEqualsInt(SquareInt(three), 9)
	Assert(SquareInt(3) == SquareInt(three))

	# test order of operations
	AssertEqualsInt(2, 1+2*3-5)
}

fun SquareInt(val:int):int { return val * val }
fun SquareFloat(val:float):float { return val * val }
PI : float <- 3.14159

fun TestFloatMath() : void
{
	AssertEqualsFloat(1.0, 2.0 / 2.0)
	Assert(1.0 < 2.0)
	Assert(-1.0 > -2.0)

	AssertEqualsFloat(3.0, Least(3.0, 5.0))		# test single-line comment

	# Area of a circle is less than the square that inscribes it
	Assert(SquareFloat(4.0) > PI * SquareFloat(2.0))

    Assert(Sqrt(9.0) == 3.0)
}

fun Least(left:float, right:float) : float
{
	if left < right
		return left
	else
		return right
}

fun TestLogicalOperators() : void
{
	true : int <- 1
	false : int <- 0
	Assert(false or true)
	Assert(true and true)
	Assert((true or false) and (false or true))
}

fun TestVectors() : void
{
	vec1 : Vec3 <- Vec3.XYZ(1.0, 1.0, 1.0)
	vec2 : Vec3 <- Vec3.XYZ(2.0, -1.0, 3.0)
	vec3 : Vec3 <- Vec3.XYZ(0.0, 0.0, 0.0)

	AssertEqualsFloat(vec1.Magnitude(), Sqrt(3.0))

	mag : float <- vec2.Magnitude()
	Assert(mag > 3.74 and mag < 3.75)
	vec2.Normalize()
	AssertEqualsFloat(1.0, vec2.Magnitude())

	dot1 : float <- vec1.Dot(vec2)
	dot2 : float <- vec12.Dot(vec1)
	AssertEqualsFloat(dot1, dot2)
	Assert(dot1 > 1.06 and dot1 < 1.07)
}
